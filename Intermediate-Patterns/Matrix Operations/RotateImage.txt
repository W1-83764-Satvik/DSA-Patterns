// Problem:
// You are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees clockwise in-place.
// LeetCode #48

// Time Complexity: O(n^2)
// Space Complexity: O(1)

public class RotateImage {

    public void rotate(int[][] matrix) {
        int n = matrix.length;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int tmp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = tmp;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n/2; j++) {
                int tmp = matrix[i][j];
                matrix[i][j] = matrix[i][n-1-j];
                matrix[i][n-1-j] = tmp;
            }
        }
    }
}

/*
Key Takeaways for Fast Revision:
1. Transpose then reverse rows.
2. In-place with constant space.
*/
