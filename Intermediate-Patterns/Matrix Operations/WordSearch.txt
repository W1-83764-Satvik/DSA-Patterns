// Problem:
// Given a 2D board and a word, return true if the word exists in the grid.
// LeetCode #79

// Time Complexity: O(m * n * 4^L)
// Space Complexity: O(L)

public class WordSearch {

    public boolean exist(char[][] board, String word) {
        int m = board.length, n = board[0].length;
        boolean[][] used = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (dfs(board, word, 0, i, j, used)) return true;
            }
        }
        return false;
    }

    private boolean dfs(char[][] board, String word, int idx, int r, int c, boolean[][] used) {
        if (idx == word.length()) return true;
        if (r < 0 || c < 0 || r >= board.length || c >= board[0].length) return false;
        if (used[r][c] || board[r][c] != word.charAt(idx)) return false;
        used[r][c] = true;
        boolean found = dfs(board, word, idx+1, r+1, c, used)
            || dfs(board, word, idx+1, r-1, c, used)
            || dfs(board, word, idx+1, r, c+1, used)
            || dfs(board, word, idx+1, r, c-1, used);
        used[r][c] = false;
        return found;
    }
}

/*
Key Takeaways for Fast Revision:
1. Backtracking with a used matrix.
2. Check bounds and char match.
3. Recurse in 4 directions.
*/
