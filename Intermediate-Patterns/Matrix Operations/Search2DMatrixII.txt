// Problem:
// Search a target in a sorted matrix (rows asc left→right, cols asc top→bottom).
// LeetCode #240

// Time Complexity: O(m + n)
// Space Complexity: O(1)

public class Search2DMatrixII {

    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length, n = matrix[0].length;
        int r = 0, c = n - 1;
        while (r < m && c >= 0) {
            if (matrix[r][c] == target) return true;
            else if (matrix[r][c] > target) c--;
            else r++;
        }
        return false;
    }
}

/*
Key Takeaways for Fast Revision:
1. Start top-right; move left if >target, down if <target.
2. O(m+n) time, O(1) space.
*/
