// Problem:
// Given an integer array nums of unique elements, return all possible subsets (the power set).
// LeetCode #78

// Time Complexity: O(n * 2^n)
// Space Complexity: O(2^n) for result list

import java.util.*;

public class Subsets {

    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        backtrack(0, nums, new ArrayList<>(), res);
        return res;
    }

    private void backtrack(int start, int[] nums, List<Integer> curr, List<List<Integer>> res) {
        res.add(new ArrayList<>(curr));
        for (int i = start; i < nums.length; i++) {
            curr.add(nums[i]);
            backtrack(i + 1, nums, curr, res);
            curr.remove(curr.size() - 1);
        }
    }

    public static void main(String[] args) {
        Subsets sol = new Subsets();
        System.out.println(sol.subsets(new int[]{1,2,3}));
        // Expected: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
    }
}

/*
Key Takeaways for Fast Revision:
1. Use backtracking with a start index to avoid duplicates.
2. Add current combination to results at each recursion.
3. Explore inclusion and exclusion of each element.
*/
