// Problem:
// Write a program to solve a Sudoku puzzle by filling the empty cells.
// '.' indicates empty, and solution must satisfy Sudoku rules.
// LeetCode #37

// Time Complexity: O(9^(m)) where m is number of empty cells
// Space Complexity: O(1) modifying board in-place

import java.util.*;

public class SudokuSolver {

    public void solveSudoku(char[][] board) {
        backtrack(board);
    }

    private boolean backtrack(char[][] board) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') {
                    for (char c = '1'; c <= '9'; c++) {
                        if (isValid(board, i, j, c)) {
                            board[i][j] = c;
                            if (backtrack(board)) return true;
                            board[i][j] = '.';
                        }
                    }
                    return false;
                }
            }
        }
        return true; // solved
    }

    private boolean isValid(char[][] board, int row, int col, char c) {
        int blockRow = (row / 3) * 3;
        int blockCol = (col / 3) * 3;
        for (int i = 0; i < 9; i++) {
            if (board[row][i] == c || board[i][col] == c ||
                board[blockRow + i/3][blockCol + i%3] == c) return false;
        }
        return true;
    }

    public static void main(String[] args) {
        char[][] board = {
            {'5','3','.','.','7','.','.','.','.'},
            {'6','.','.','1','9','5','.','.','.'},
            {'.','9','8','.','.','.','.','6','.'},
            {'8','.','.','.','6','.','.','.','3'},
            {'4','.','.','8','.','3','.','.','1'},
            {'7','.','.','.','2','.','.','.','6'},
            {'.','6','.','.','.','.','2','8','.'},
            {'.','.','.','4','1','9','.','.','5'},
            {'.','.','.','.','8','.','.','7','9'}
        };
        SudokuSolver sol = new SudokuSolver();
        sol.solveSudoku(board);
        for (char[] row : board) System.out.println(Arrays.toString(row));
    }
}

/*
Key Takeaways for Fast Revision:
1. Backtracking to fill empty cells one by one.
2. Check row, column, and 3x3 block for validity.
3. Return true when board is completely filled.
*/
