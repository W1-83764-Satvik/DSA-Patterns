// Problem:
// Given an array of distinct integers candidates and a target, return combinations where candidates sum to target.
// Candidates may be chosen unlimited times.
// LeetCode #39

// Time Complexity: O(k * n^k) where k is target/min(candidates)
// Space Complexity: O(k)

import java.util.*;

public class CombinationSum {

    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        backtrack(candidates, target, 0, new ArrayList<>(), res);
        return res;
    }

    private void backtrack(int[] candidates, int remain, int start, List<Integer> curr, List<List<Integer>> res) {
        if (remain < 0) return;
        if (remain == 0) {
            res.add(new ArrayList<>(curr));
            return;
        }
        for (int i = start; i < candidates.length; i++) {
            curr.add(candidates[i]);
            backtrack(candidates, remain - candidates[i], i, curr, res);
            curr.remove(curr.size() - 1);
        }
    }

    public static void main(String[] args) {
        CombinationSum sol = new CombinationSum();
        System.out.println(sol.combinationSum(new int[]{2,3,6,7}, 7));
        // Expected: [[2,2,3],[7]]
    }
}

/*
Key Takeaways for Fast Revision:
1. Backtrack with the same start index to allow reuse of elements.
2. Stop recursion when remainder < 0.
3. Add current list to results when remainder == 0.
*/
