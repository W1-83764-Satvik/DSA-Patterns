// Problem:
// Given a 2D grid of '1's (land) and '0's (water), count the number of islands.
// An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.
// LeetCode #200

// Time Complexity: O(m * n)
// Space Complexity: O(m * n) for the recursion stack in worst case

public class NumberOfIslands {

    private int rows;
    private int cols;
    private char[][] grid;

    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) return 0;
        this.grid = grid;
        rows = grid.length;
        cols = grid[0].length;
        int count = 0;
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (grid[r][c] == '1') {
                    count++;
                    dfs(r, c);
                }
            }
        }
        return count;
    }

    private void dfs(int r, int c) {
        if (r < 0 || c < 0 || r >= rows || c >= cols || grid[r][c] != '1') return;
        grid[r][c] = '0'; // mark visited
        dfs(r + 1, c);
        dfs(r - 1, c);
        dfs(r, c + 1);
        dfs(r, c - 1);
    }

    public static void main(String[] args) {
        NumberOfIslands sol = new NumberOfIslands();
        char[][] grid = {
            {'1','1','0','0','0'},
            {'1','1','0','0','0'},
            {'0','0','1','0','0'},
            {'0','0','0','1','1'}
        };
        System.out.println("Number of islands: " + sol.numIslands(grid)); // Expected: 3
    }
}

/*
Key Takeaways for Fast Revision:
1. Use DFS to mark all connected '1's as visited by flipping to '0'.
2. Iterate through grid; each unvisited '1' indicates a new island.
3. DFS visits all parts of that island, preventing recount.
4. O(m*n) time and space for recursion depth.
*/
