// Problem:
// There are numCourses labeled from 0 to numCourses-1. Given prerequisites pairs [a,b] meaning to take course a you must take b first,
// return an order of courses you should take to finish all courses, or an empty array if impossible.
// LeetCode #210

// Time Complexity: O(V + E)
// Space Complexity: O(V + E)

import java.util.*;

public class CourseScheduleII {

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        List<List<Integer>> graph = new ArrayList<>();
        int[] indegree = new int[numCourses];
        for (int i = 0; i < numCourses; i++) graph.add(new ArrayList<>());
        for (int[] pre : prerequisites) {
            graph.get(pre[1]).add(pre[0]);
            indegree[pre[0]]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) queue.offer(i);
        }
        int[] order = new int[numCourses];
        int idx = 0, visited = 0;
        while (!queue.isEmpty()) {
            int course = queue.poll();
            order[idx++] = course;
            visited++;
            for (int next : graph.get(course)) {
                indegree[next]--;
                if (indegree[next] == 0) queue.offer(next);
            }
        }
        return visited == numCourses ? order : new int[0];
    }

    public static void main(String[] args) {
        CourseScheduleII sol = new CourseScheduleII();
        int numCourses = 4;
        int[][] prerequisites = {{1,0},{2,0},{3,1},{3,2}};
        System.out.println(Arrays.toString(sol.findOrder(numCourses, prerequisites)));
        // Possible Output: [0,2,1,3] or [0,1,2,3]
    }
}

/*
Key Takeaways for Fast Revision:
1. Topological sort with Kahn’s algorithm (BFS).
2. Build adjacency list and indegree array.
3. Enqueue courses with indegree 0, process and reduce neighbor indegrees.
4. If all courses visited, return order; else, graph has a cycle → return empty.
*/
