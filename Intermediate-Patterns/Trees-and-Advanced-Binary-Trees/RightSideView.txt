// Problem:
// Return the right side view of a binary tree (visible nodes from right).
// LeetCode #199

// Time Complexity: O(n)
// Space Complexity: O(n)

import java.util.*;

public class RightSideView {

    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if (root == null) return res;
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                TreeNode node = q.poll();
                if (i == size - 1) res.add(node.val);
                if (node.left != null) q.offer(node.left);
                if (node.right != null) q.offer(node.right);
            }
        }
        return res;
    }
}

/*
Key Takeaways for Fast Revision:
1. BFS by level; record last node of each level.
*/
