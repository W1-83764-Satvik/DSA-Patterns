// Problem:
// Return the level order traversal (breadth-first) of a binary tree.
// LeetCode #102

// Time Complexity: O(n)
// Space Complexity: O(n)

import java.util.*;

public class BinaryTreeLevelOrderTraversal {

    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) return res;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> level = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                level.add(node.val);
                if (node.left != null) queue.offer(node.left);
                if (node.right != null) queue.offer(node.right);
            }
            res.add(level);
        }
        return res;
    }
}

/*
Key Takeaways for Fast Revision:
1. Use queue and BFS to process one level at a time.
2. Track current queue size for level boundaries.
*/
