// Problem:
// Find LCA of two nodes in a binary tree.
// LeetCode #236

// Time Complexity: O(n)
// Space Complexity: O(n)

public class LowestCommonAncestorOfBinaryTree {

    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null || root == p || root == q) return root;
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        if (left != null && right != null) return root;
        return left != null ? left : right;
    }
}

/*
Key Takeaways for Fast Revision:
1. Recursively search for p and q; if found on both sides, root is LCA.
2. Return non-null child or null upward.
*/
