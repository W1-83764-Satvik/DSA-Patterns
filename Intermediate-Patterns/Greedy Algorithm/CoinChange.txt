// Problem:
// Given an array of coin denominations and a total amount,
// compute the fewest number of coins needed to make up that amount. Return -1 if not possible.
// LeetCode #322

// Time Complexity: O(amount * n) where n is number of coins
// Space Complexity: O(amount)

import java.util.*;

public class CoinChange {

    public int coinChange(int[] coins, int amount) {
        int max = amount + 1;
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, max);
        dp[0] = 0;
        for (int i = 1; i <= amount; i++) {
            for (int coin : coins) {
                if (coin <= i) {
                    dp[i] = Math.min(dp[i], dp[i - coin] + 1);
                }
            }
        }
        return dp[amount] > amount ? -1 : dp[amount];
    }

    public static void main(String[] args) {
        CoinChange sol = new CoinChange();
        System.out.println(sol.coinChange(new int[]{1,2,5}, 11)); // Expected: 3 (5+5+1)
        System.out.println(sol.coinChange(new int[]{2}, 3));      // Expected: -1
    }
}

/*
Key Takeaways for Fast Revision:
1. Use bottom-up DP: dp[i] = min coins for amount i.
2. Initialize dp array with a sentinel value (amount+1).
3. For each amount, iterate all coins and update dp[i].
4. If dp[amount] remains > amount, return -1; else dp[amount].
*/
