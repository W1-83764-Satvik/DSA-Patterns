// Problem:
// Given a string s containing just the characters '(', ')', '{', '}', '[' and ']',
// determine if the input string is valid. An input string is valid if:
// 1. Open brackets are closed by the same type of brackets.
// 2. Open brackets are closed in the correct order.
// LeetCode #20

// Time Complexity: O(n)
// Space Complexity: O(n)

import java.util.*;

public class ValidParentheses {

    public static boolean isValid(String s) {
        Deque<Character> stack = new ArrayDeque<>();
        for (char c : s.toCharArray()) {
            if (c == '(') stack.push(')');
            else if (c == '{') stack.push('}');
            else if (c == '[') stack.push(']');
            else {
                if (stack.isEmpty() || stack.pop() != c) return false;
            }
        }
        return stack.isEmpty();
    }

    public static void main(String[] args) {
        System.out.println(isValid("()[]{}")); // Expected: true
        System.out.println(isValid("(]"));     // Expected: false
    }
}

/*
Key Takeaways for Fast Revision:
1. Use a stack to push expected closing brackets.
2. For each char, if it's an opening bracket, push its matching closing bracket.
3. If it's a closing bracket, check stack for match; return false if mismatch.
4. At end, stack should be empty for a valid string.
*/
