// Problem:
// Given two arrays nums1 and nums2 where nums1 is a subset of nums2,
// for each element in nums1 find the next greater element in nums2.
// The Next Greater Element of an element x in nums2 is the first greater element to its right in nums2.
// If it does not exist, output -1 for this number.
// LeetCode #496

// Time Complexity: O(n + m) where n = length of nums2, m = length of nums1
// Space Complexity: O(n) for stack and map

import java.util.*;

public class NextGreaterElementI {

    public static int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Map<Integer, Integer> nextGreater = new HashMap<>();
        Deque<Integer> stack = new ArrayDeque<>();

        for (int num : nums2) {
            while (!stack.isEmpty() && stack.peek() < num) {
                nextGreater.put(stack.pop(), num);
            }
            stack.push(num);
        }

        int[] result = new int[nums1.length];
        for (int i = 0; i < nums1.length; i++) {
            result[i] = nextGreater.getOrDefault(nums1[i], -1);
        }
        return result;
    }

    public static void main(String[] args) {
        int[] nums1 = {4,1,2};
        int[] nums2 = {1,3,4,2};
        System.out.println(Arrays.toString(nextGreaterElement(nums1, nums2)));
        // Expected: [-1,3,-1]
    }
}

/*
Key Takeaways for Fast Revision:
1. Traverse nums2 with a stack to record next greater elements:
   - If current number > stack top, pop stack and record mapping.
   - Push current number onto stack.
2. Remaining stack elements have no next greater â†’ default to -1.
3. Lookup results for nums1 from the map.
4. Efficient O(n + m) solution using monotonic stack.
*/
