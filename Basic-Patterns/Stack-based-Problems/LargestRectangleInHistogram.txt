// Problem:
// Given an array heights representing the histogram's bar height where the width of each bar is 1,
// return the area of the largest rectangle in the histogram.
// LeetCode #84

// Time Complexity: O(n)
// Space Complexity: O(n) for stack

import java.util.*;

public class LargestRectangleInHistogram {

    public static int largestRectangleArea(int[] heights) {
        Deque<Integer> stack = new ArrayDeque<>();
        stack.push(-1);
        int maxArea = 0;
        for (int i = 0; i < heights.length; i++) {
            while (stack.peek() != -1 && heights[i] < heights[stack.peek()]) {
                int height = heights[stack.pop()];
                int width = i - stack.peek() - 1;
                maxArea = Math.max(maxArea, height * width);
            }
            stack.push(i);
        }
        while (stack.peek() != -1) {
            int height = heights[stack.pop()];
            int width = heights.length - stack.peek() - 1;
            maxArea = Math.max(maxArea, height * width);
        }
        return maxArea;
    }

    public static void main(String[] args) {
        int[] heights = {2,1,5,6,2,3};
        System.out.println("Largest rectangle area: " + largestRectangleArea(heights)); // Expected: 10
    }
}

/*
Key Takeaways for Fast Revision:
1. Use a monotonic increasing stack storing indices.
2. Push -1 as sentinel to simplify width calculation.
3. When current height < stack top, pop and calculate area.
4. After traversal, empty stack to compute remaining areas.
*/
