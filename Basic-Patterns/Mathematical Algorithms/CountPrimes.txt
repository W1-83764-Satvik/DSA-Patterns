// Problem:
// Count the number of prime numbers less than a non-negative number n using the Sieve of Eratosthenes.
// LeetCode #204

// Time Complexity: O(n log log n)
// Space Complexity: O(n)

import java.util.Arrays;

public class CountPrimes {

    public static int countPrimes(int n) {
        if (n <= 2) return 0;
        boolean[] isPrime = new boolean[n];
        Arrays.fill(isPrime, true);
        isPrime[0] = false;
        isPrime[1] = false;
        for (int i = 2; i * i < n; i++) {
            if (isPrime[i]) {
                for (int j = i * i; j < n; j += i) {
                    isPrime[j] = false;
                }
            }
        }
        int count = 0;
        for (boolean prime : isPrime) {
            if (prime) count++;
        }
        return count;
    }

    public static void main(String[] args) {
        System.out.println(countPrimes(10)); // Expected: 4 (2,3,5,7)
    }
}

/*
Key Takeaways for Fast Revision:
1. Use boolean array and mark multiples starting from i*i.
2. Time: O(n log log n), Space: O(n).
*/
