// Problem:
// Perform prime factorization on a given integer n and return a map of prime factors to their counts.

// Time Complexity: O(sqrt(n))
// Space Complexity: O(log n) for recursion stack (optional) or O(1) extra

import java.util.*;

public class PrimeFactorization {

    public static Map<Integer, Integer> primeFactorize(int n) {
        Map<Integer, Integer> factors = new LinkedHashMap<>();
        for (int i = 2; i * i <= n; i++) {
            while (n % i == 0) {
                factors.put(i, factors.getOrDefault(i, 0) + 1);
                n /= i;
            }
        }
        if (n > 1) {
            factors.put(n, factors.getOrDefault(n, 0) + 1);
        }
        return factors;
    }

    public static void main(String[] args) {
        int n = 360;
        Map<Integer, Integer> result = primeFactorize(n);
        System.out.println("Prime factors of " + n + ": " + result); // Expected: {2=3, 3=2, 5=1}
    }
}

/*
Key Takeaways for Fast Revision:
1. Divide out factors starting from 2 up to sqrt(n).
2. If remainder > 1, it's a prime factor.
3. Uses map to count occurrences.
*/
