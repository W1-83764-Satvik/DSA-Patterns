// Problem:
// Implement pow(x, n), i.e., compute x raised to the power n.
// LeetCode #50

// Time Complexity: O(log n)
// Space Complexity: O(1)

public class PowXN {

    public static double myPow(double x, long n) {
        if (n < 0) {
            x = 1 / x;
            n = -n;
        }
        double result = 1;
        while (n > 0) {
            if ((n & 1) == 1) {
                result *= x;
            }
            x *= x;
            n >>= 1;
        }
        return result;
    }

    public static void main(String[] args) {
        System.out.println(myPow(2.00000, 10)); // Expected: 1024.0
    }
}

/*
Key Takeaways for Fast Revision:
1. Use fast exponentiation by squaring.
2. Handle negative exponent by reciprocal.
3. Loop until n becomes zero, updating result when n is odd.
*/
