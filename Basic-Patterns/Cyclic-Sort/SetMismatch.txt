// Problem:
// You have a set of integers from 1 to n. One number is duplicated and one is missing.
// Return the duplicated number and the missing number.

// Time Complexity: O(n)
// Space Complexity: O(1)

// Pattern: Cyclic Sort

public class SetMismatch {

    public static int[] findErrorNums(int[] nums) {
        int n = nums.length;
        int i = 0;
        while (i < n) {
            if (nums[i] != i + 1 && nums[nums[i] - 1] != nums[i]) {
                int tmp = nums[nums[i] - 1];
                nums[nums[i] - 1] = nums[i];
                nums[i] = tmp;
            } else {
                i++;
            }
        }
        for (int j = 0; j < n; j++) {
            if (nums[j] != j + 1) {
                // nums[j] is the duplicate, j+1 is the missing
                return new int[] {nums[j], j + 1};
            }
        }
        return new int[] {-1, -1};
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 2, 4};
        int[] res = findErrorNums(nums);
        System.out.println("Duplicate: " + res[0] + ", Missing: " + res[1]); // Expected: 2, 3
    }
}

/*
Key Takeaways for Fast Revision:
1. Cyclic sort to place numbers at correct indices.
2. After sorting, the index j where nums[j] != j+1 gives duplicate and missing.
3. Return [duplicate, missing].
4. O(n) time, O(1) space.
*/
