// Problem:
// Given n non-negative integers representing elevation heights,
// compute how much water it can trap after raining.

// Time Complexity: O(n)
// Space Complexity: O(n)

public class TrappingRainWater {

    public static int trap(int[] height) {
        int n = height.length;
        int[] leftMax = new int[n];
        int[] rightMax = new int[n];

        leftMax[0] = height[0];
        for (int i = 1; i < n; i++) {
            leftMax[i] = Math.max(leftMax[i - 1], height[i]);
        }

        rightMax[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            rightMax[i] = Math.max(rightMax[i + 1], height[i]);
        }

        int trapped = 0;
        for (int i = 0; i < n; i++) {
            trapped += Math.min(leftMax[i], rightMax[i]) - height[i];
        }

        return trapped;
    }

    public static void main(String[] args) {
        int[] height = {0,1,0,2,1,0,1,3,2,1,2,1};
        System.out.println("Trapped water: " + trap(height)); // Expected: 6
    }
}

/*
Key Takeaways for Fast Revision:
1. Precompute left and right max boundaries for each bar.
2. Water at each index = min(leftMax, rightMax) - height[i].
3. Efficient and works in linear time.
*/
