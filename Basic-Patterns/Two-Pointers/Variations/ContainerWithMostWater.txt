// Problem:
// Given an array of heights, find two lines that together with the x-axis forms a container,
// such that the container contains the most water.

// Time Complexity: O(n)
// Space Complexity: O(1)

public class ContainerWithMostWater {

    public static int maxArea(int[] height) {
        int left = 0, right = height.length - 1;
        int max = 0;

        while (left < right) {
            int minHeight = Math.min(height[left], height[right]);
            int area = minHeight * (right - left);
            max = Math.max(max, area);

            if (height[left] < height[right]) {
                left++;
            } else {
                right--;
            }
        }

        return max;
    }

    public static void main(String[] args) {
        int[] height = {1,8,6,2,5,4,8,3,7};
        System.out.println("Max area: " + maxArea(height)); // Expected: 49
    }
}

/*
Key Takeaways for Fast Revision:
1. Use two pointers from both ends of the array.
2. Move the pointer pointing to the shorter line to maximize area.
3. Time-efficient and uses constant space.
*/
