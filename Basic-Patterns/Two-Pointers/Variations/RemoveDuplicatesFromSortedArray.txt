// Problem:
// Given a sorted array, remove duplicates in-place such that each unique element appears only once.
// Return the new length of the modified array.

// Time Complexity: O(n)
// Space Complexity: O(1)

public class RemoveDuplicatesFromSortedArray {

    public static int removeDuplicates(int[] nums) {
        if (nums.length == 0) return 0;

        int j = 1;

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != nums[i - 1]) {
                nums[j] = nums[i];
                j++;
            }
        }

        return j;
    }

    public static void main(String[] args) {
        int[] nums = {1, 1, 2};
        int len = removeDuplicates(nums);
        System.out.println("New length: " + len); // Expected: 2
    }
}

/*
Key Takeaways for Fast Revision:
1. Use two-pointer technique: one for reading, one for writing.
2. Skip over duplicates, and overwrite them with unique elements.
3. Sorted array ensures duplicates are adjacent.
4. Return the index where the next unique number would be placed.
*/
