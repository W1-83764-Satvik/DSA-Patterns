// Problem:
// Given a sorted array of integers and a target,
// return indices (1-based) of the two numbers such that they add up to the target.

// Time Complexity: O(n)
// Space Complexity: O(1)

public class TwoSumSorted {

    public static int[] twoSum(int[] numbers, int target) {
        int left = 0, right = numbers.length - 1;

        while (left < right) {
            int sum = numbers[left] + numbers[right];

            if (sum == target) {
                return new int[]{left + 1, right + 1};
            } else if (sum < target) {
                left++;
            } else {
                right--;
            }
        }

        return new int[]{}; // Guaranteed to have one solution
    }

    public static void main(String[] args) {
        int[] numbers = {2, 7, 11, 15};
        int target = 9;
        int[] result = twoSum(numbers, target);
        System.out.println("Indices: " + result[0] + ", " + result[1]); // Expected: 1, 2
    }
}

/*
Key Takeaways for Fast Revision:
1. Use two-pointer technique because the input array is sorted.
2. Move left/right pointer based on sum comparison with target.
3. Return 1-based indices.
*/
