// Problem: Find all triplets (a, b, c) in the array such that a + b = c
// Time Complexity: O(N^2) - Looping through all pairs for each third element
// Space Complexity: O(1) - Output space only (ignoring result list)

import java.util.*;

static List<List<Integer>> tripletSumEqualsThird(int[] arr) {
    List<List<Integer>> result = new ArrayList<>();
    int n = arr.length;

    // Sort array to use two-pointer technique
    Arrays.sort(arr);

    // Fix the third element (c) and use two pointers to find (a, b)
    for (int k = 2; k < n; k++) {
        int c = arr[k];
        int left = 0, right = k - 1;

        while (left < right) {
            int sum = arr[left] + arr[right];

            if (sum == c) {
                result.add(Arrays.asList(arr[left], arr[right], c));
                left++;
                right--;
                // Skip duplicates if needed
            } else if (sum < c) {
                left++;
            } else {
                right--;
            }
        }
    }

    return result;
}

/*
 Key Takeaways:
1. Sort the array so two-pointer technique can be applied.
2. Fix the third element `c = arr[k]`, and look for `a + b = c` in subarray arr[0..k-1].
3. Efficient for finding additive triplets.
4. You can further enhance the solution to skip duplicates if needed.
5. Example: For input [1, 2, 3, 4, 5], valid triplets â†’ [1, 2, 3], [1, 3, 4], [2, 3, 5]

 Note: Sorting is important for two-pointer logic. If array is not sorted beforehand, results may be incorrect.
*/
