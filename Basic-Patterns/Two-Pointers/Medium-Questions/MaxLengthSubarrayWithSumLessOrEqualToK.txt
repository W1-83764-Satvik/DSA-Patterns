// Problem:
// Given an array of integers and an integer k,
// find the length of the longest subarray whose sum is less than or equal to k.

// Time Complexity: O(n) — each element is visited at most twice
// Space Complexity: O(1)

public class MaxLengthSubarraySum {

    public static int maxLengthSubarrayWithSumLessOrEqualToK(int[] nums, int k) {
        int left = 0, right = 0;
        int sum = 0;
        int maxLen = 0;

        while (right < nums.length) {
            sum += nums[right];

            // Shrink window until sum is less than or equal to k
            while (sum > k) {
                sum -= nums[left];
                left++;
            }

            // Update max length
            maxLen = Math.max(maxLen, right - left + 1);
            right++;
        }

        return maxLen;
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 1, 0, 1, 1, 0};
        int k = 4;

        System.out.println("Max subarray length with sum ≤ " + k + ": " + maxLengthSubarrayWithSumLessOrEqualToK(nums, k));
        // Expected Output: 5
    }
}

/*
Key Takeaways for Fast Revision:
1. Use a sliding window to track the sum of the current subarray.
2. Expand the window by moving the right pointer.
3. If the sum exceeds k, shrink the window from the left until it's ≤ k.
4. At each step, calculate the length and update max length if it's larger.
5. Works only with non-negative numbers; if negative numbers are involved, this approach fails.
6. This is a variable-size sliding window pattern — expand and shrink as needed.
7. Time complexity is linear (O(n)), making it efficient for large arrays.
*/
