// Problem:
// Find the maximum sum of a contiguous subarray within an integer array (can include negatives).

// Time Complexity: O(n)
// Space Complexity: O(1)

public class MaxSubarrayKadane {

    public static int maxSubArray(int[] nums) {
        int currentSum = nums[0];
        int maxSum = nums[0];

        for (int i = 1; i < nums.length; i++) {
            currentSum = Math.max(nums[i], currentSum + nums[i]);
            maxSum = Math.max(maxSum, currentSum);
        }

        return maxSum;
    }

    public static void main(String[] args) {
        int[] nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
        System.out.println("Max subarray sum: " + maxSubArray(nums)); // Expected: 6
    }
}

/*
Key Takeaways for Fast Revision:
1. Kadaneâ€™s Algorithm tracks current running sum and resets when it's negative.
2. At each step: maxSum = max(maxSum, currentSum).
3. Works for both positive and negative numbers.
4. Time: O(n), Space: O(1), no extra data structures used.
*/
