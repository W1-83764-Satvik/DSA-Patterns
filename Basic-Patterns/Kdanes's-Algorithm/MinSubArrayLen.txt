// Problem:
// Given an array of positive integers and a target, return the length of the smallest subarray
// whose sum is greater than or equal to the target.

// Time Complexity: O(n)
// Space Complexity: O(1)

public class MinSubarrayLength {

    public static int minSubArrayLen(int target, int[] nums) {
        int left = 0, sum = 0, minLen = Integer.MAX_VALUE;

        for (int right = 0; right < nums.length; right++) {
            sum += nums[right];
            while (sum >= target) {
                minLen = Math.min(minLen, right - left + 1);
                sum -= nums[left++];
            }
        }

        return minLen == Integer.MAX_VALUE ? 0 : minLen;
    }

    public static void main(String[] args) {
        int[] nums = {2, 3, 1, 2, 4, 3};
        int target = 7;
        System.out.println("Minimum subarray length: " + minSubArrayLen(target, nums)); // Expected: 2
    }
}

/*
Key Takeaways for Fast Revision:
1. Use sliding window technique to dynamically shrink the window once sum â‰¥ target.
2. Maintain left pointer and slide right pointer.
3. Update minimum length whenever condition is met.
4. Time complexity: O(n) due to one full traversal.
*/
