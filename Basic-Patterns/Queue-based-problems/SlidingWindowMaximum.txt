// Problem:
// Given an integer array nums and a sliding window size k,
// return the max value in each sliding window of size k.
// LeetCode #239

// Time Complexity: O(n)
// Space Complexity: O(n) for deque

import java.util.*;

public class SlidingWindowMaximum {

    public static int[] maxSlidingWindow(int[] nums, int k) {
        if (nums == null || k <= 0) return new int[0];
        int n = nums.length;
        int[] result = new int[n - k + 1];
        Deque<Integer> deque = new ArrayDeque<>();

        for (int i = 0; i < n; i++) {
            // Remove indices outside the window
            while (!deque.isEmpty() && deque.peekFirst() < i - k + 1) {
                deque.pollFirst();
            }
            // Remove smaller values from the back
            while (!deque.isEmpty() && nums[deque.peekLast()] < nums[i]) {
                deque.pollLast();
            }
            deque.offerLast(i);
            if (i >= k - 1) {
                result[i - k + 1] = nums[deque.peekFirst()];
            }
        }
        return result;
    }

    public static void main(String[] args) {
        int[] nums = {1,3,-1,-3,5,3,6,7};
        int k = 3;
        System.out.println(Arrays.toString(maxSlidingWindow(nums, k))); // Expected: [3,3,5,5,6,7]
    }
}

/*
Key Takeaways for Fast Revision:
1. Maintain a deque of indices with values in decreasing order.
2. Pop from front if index is out of current window.
3. Pop from back while current value > value at deque's back.
4. Each element enters and leaves deque at most once â†’ O(n).
*/
