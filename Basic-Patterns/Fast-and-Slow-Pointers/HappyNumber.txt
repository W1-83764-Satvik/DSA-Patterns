// Problem:
// Determine if a number is a "happy number".
// A number is happy if repeatedly replacing it with the sum of squares of its digits leads to 1.

// Time Complexity: O(log n) per iteration
// Space Complexity: O(1)

public class HappyNumber {

    public static boolean isHappy(int n) {
        int slow = n, fast = getNext(n);

        while (fast != 1 && slow != fast) {
            slow = getNext(slow);
            fast = getNext(getNext(fast));
        }

        return fast == 1;
    }

    private static int getNext(int num) {
        int sum = 0;
        while (num != 0) {
            int digit = num % 10;
            sum += digit * digit;
            num /= 10;
        }
        return sum;
    }

    public static void main(String[] args) {
        int n = 19;
        System.out.println("Is happy number: " + isHappy(n)); // Expected: true
    }
}

/*
Key Takeaways for Fast Revision:
1. Use fast and slow pointers to detect cycles in digit-square transformation.
2. If cycle reaches 1, number is happy.
3. Use getNext() to compute sum of squares of digits.
4. This is Floyd's cycle detection in math, not linked list.
*/
