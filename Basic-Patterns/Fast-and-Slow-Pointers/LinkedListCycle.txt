// Problem:
// Detect whether a linked list has a cycle in it using fast and slow pointers.

// Time Complexity: O(n)
// Space Complexity: O(1)

public class LinkedListCycle {

    static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public static boolean hasCycle(Node head) {
        Node slow = head, fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;

            if (slow == fast) return true;
        }

        return false;
    }

    public static void main(String[] args) {
        Node head = new Node(3);
        head.next = new Node(2);
        head.next.next = new Node(0);
        head.next.next.next = new Node(-4);
        head.next.next.next.next = head.next; // cycle

        System.out.println("Has cycle: " + hasCycle(head)); // Expected: true
    }
}

/*
Key Takeaways for Fast Revision:
1. Use two pointers: slow moves 1 step, fast moves 2 steps.
2. If there’s a cycle, they will eventually meet.
3. If fast reaches null, no cycle exists.
4. This is Floyd’s Tortoise and Hare algorithm.
*/
