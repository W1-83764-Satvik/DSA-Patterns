// Problem:
// Return the middle node of a singly linked list.
// If there are two middle nodes, return the second one.

// Time Complexity: O(n)
// Space Complexity: O(1)

public class MiddleOfLinkedList {

    static class Node {
        int val;
        Node next;
        Node(int val) {
            this.val = val;
        }
    }

    public static Node middleNode(Node head) {
        Node slow = head, fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        return slow;
    }

    public static void main(String[] args) {
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = new Node(5);

        System.out.println("Middle Node: " + middleNode(head).val); // Expected: 3
    }
}

/*
Key Takeaways for Fast Revision:
1. Use two pointers: slow and fast.
2. Fast moves twice as fast as slow.
3. When fast reaches end, slow will be at the middle.
4. Returns second middle in even-length lists.
*/
