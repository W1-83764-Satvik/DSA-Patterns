// Problem:
// Given a list of non-overlapping intervals sorted by start time and a new interval,
// insert the new interval into the list and merge if necessary,
// returning the updated list of intervals.

// Time Complexity: O(n)
// Space Complexity: O(n) for output list

import java.util.*;

public class InsertInterval {

    public static List<int[]> insert(List<int[]> intervals, int[] newInterval) {
        List<int[]> result = new ArrayList<>();

        for (int[] interval : intervals) {
            if (interval[1] < newInterval[0]) {
                // Current interval ends before new interval starts → no overlap
                result.add(interval);
            } else if (interval[0] > newInterval[1]) {
                // Current interval starts after new interval ends → no overlap and all further intervals too
                result.add(newInterval);
                newInterval = interval;
            } else {
                // Overlapping intervals → merge
                newInterval[0] = Math.min(newInterval[0], interval[0]);
                newInterval[1] = Math.max(newInterval[1], interval[1]);
            }
        }

        // Add the last interval
        result.add(newInterval);
        return result;
    }

    public static void main(String[] args) {
        List<int[]> intervals = new ArrayList<>();
        intervals.add(new int[]{1,3});
        intervals.add(new int[]{6,9});
        int[] newInterval = {2,5};
        List<int[]> result = insert(intervals, newInterval);
        System.out.println("Updated intervals:");
        for (int[] interval : result) {
            System.out.println(Arrays.toString(interval));
        }
        // Expected Output:
        // [1, 5]
        // [6, 9]
    }
}

/*
Key Takeaways for Fast Revision:
1. Add intervals that end before new interval without changes.
2. Merge overlapping intervals by adjusting newInterval boundaries.
3. Add remaining intervals that start after newInterval.
4. One-pass solution: O(n) time, O(n) space for output.
*/
