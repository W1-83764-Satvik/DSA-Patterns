// Problem:
// Given an array of intervals where intervals[i] = [start_i, end_i],
// merge all overlapping intervals and return an array of the non-overlapping intervals
// that cover all the intervals in the input.

// Time Complexity: O(n log n) due to sorting
// Space Complexity: O(n) for output list

import java.util.*;

public class MergeIntervals {

    public static int[][] merge(int[][] intervals) {
        if (intervals.length <= 1) return intervals;

        // Sort by start time
        Arrays.sort(intervals, Comparator.comparingInt(a -> a[0]));

        List<int[]> merged = new ArrayList<>();
        int[] current = intervals[0];

        for (int i = 1; i < intervals.length; i++) {
            int[] next = intervals[i];
            if (next[0] <= current[1]) {
                // Overlap â†’ merge
                current[1] = Math.max(current[1], next[1]);
            } else {
                merged.add(current);
                current = next;
            }
        }
        merged.add(current);

        return merged.toArray(new int[merged.size()][]);
    }

    public static void main(String[] args) {
        int[][] intervals = {{1,3},{2,6},{8,10},{15,18}};
        int[][] result = merge(intervals);
        System.out.println("Merged intervals:");
        for (int[] interval : result) {
            System.out.println(Arrays.toString(interval));
        }
        // Expected Output:
        // [1, 6]
        // [8, 10]
        // [15, 18]
    }
}

/*
Key Takeaways for Fast Revision:
1. Sort intervals by start time to simplify merging.
2. Iterate and merge overlapping intervals by comparing current end with next start.
3. Collect merged intervals in a list and convert back to array.
4. Time complexity dominated by sorting: O(n log n).
*/
