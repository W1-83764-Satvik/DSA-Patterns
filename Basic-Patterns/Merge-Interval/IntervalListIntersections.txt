// Problem:
// Given two lists of closed intervals, each list of intervals is pairwise disjoint and sorted.
// Return the intersection of these two interval lists.

// Time Complexity: O(m + n)
// Space Complexity: O(m + n)

import java.util.*;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

public class IntervalListIntersections {

    public static List<int[]> intervalIntersection(int[][] A, int[][] B) {
        List<int[]> result = new ArrayList<>();
        int i = 0, j = 0;
        while (i < A.length && j < B.length) {
            int lo = Math.max(A[i][0], B[j][0]);
            int hi = Math.min(A[i][1], B[j][1]);
            if (lo <= hi) {
                result.add(new int[]{lo, hi});
            }
            if (A[i][1] < B[j][1]) i++;
            else j++;
        }
        return result;
    }

    public static void main(String[] args) {
        int[][] A = {{0,2},{5,10},{13,23},{24,25}};
        int[][] B = {{1,5},{8,12},{15,24},{25,26}};
        List<int[]> res = intervalIntersection(A, B);
        System.out.println("Intersections:");
        for (int[] in : res) {
            System.out.println(Arrays.toString(in));
        }
        // Expected:
        // [1,2]
        // [5,5]
        // [8,10]
        // [15,23]
        // [24,24]
        // [25,25]
    }
}

/*
Key Takeaways for Fast Revision:
1. Use two pointers to traverse both lists.
2. Intersection exists if max(start1, start2) <= min(end1, end2).
3. Advance the pointer of the interval that ends first.
4. Time: O(m+n), Space: O(m+n) for result.
*/
