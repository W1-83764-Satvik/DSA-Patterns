// Problem:
// Given a set of intervals, return the minimum number of intervals you need to remove
// to make the rest of the intervals non-overlapping.

// Time Complexity: O(n log n)
// Space Complexity: O(1)

import java.util.Arrays;

public class NonOverlappingIntervals {

    public static int eraseOverlapIntervals(int[][] intervals) {
        if (intervals.length == 0) return 0;
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[1], b[1]));
        int removals = 0, prevEnd = intervals[0][1];
        for (int i = 1; i < intervals.length; i++) {
            if (intervals[i][0] < prevEnd) {
                removals++;
            } else {
                prevEnd = intervals[i][1];
            }
        }
        return removals;
    }

    public static void main(String[] args) {
        int[][] intervals = {{1,2},{2,3},{3,4},{1,3}};
        System.out.println("Min removals: " + eraseOverlapIntervals(intervals)); // Expected: 1
    }
}

/*
Key Takeaways for Fast Revision:
1. Sort intervals by end time.
2. Keep track of the end of the last non-overlapping interval.
3. Remove intervals whose start is before the tracked end.
4. Time: O(n log n) for sort. Space: O(1).
*/
