// Problem:
// Rotate a linked list to the right by k places.

// Time Complexity: O(n)
// Space Complexity: O(1)

public class RotateLinkedList {

    static class Node {
        int val;
        Node next;
        Node(int val) {
            this.val = val;
        }
    }

    static Node rotateRight(Node head, int k) {
        if (head == null || k == 0 || head.next == null) return head;

        // Step 1: Calculate the length of the list
        int len = 0;
        Node temp = head;
        while (temp != null) {
            temp = temp.next;
            len++;
        }

        // Step 2: Adjust k
        k = k % len;
        if (k == 0) return head;

        // Step 3: Move to (len - k)th node
        Node newHead = head;
        Node prevOfNewHead = null;

        for (int i = 0; i < len - k; i++) {
            prevOfNewHead = newHead;
            newHead = newHead.next;
        }

        // Step 4: Break the list
        prevOfNewHead.next = null;

        // Step 5: Find tail and attach old head
        Node tail = newHead;
        while (tail.next != null) {
            tail = tail.next;
        }

        tail.next = head;

        return newHead;
    }

    public static void main(String[] args) {
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = new Node(5);

        Node rotated = rotateRight(head, 2);
        while (rotated != null) {
            System.out.print(rotated.val + " ");
            rotated = rotated.next;
        }
        // Expected Output: 4 5 1 2 3
    }
}

/*
Key Takeaways for Fast Revision:
1. Calculate the length to handle k > len.
2. Identify the (len - k)th node to rotate.
3. Break the list and reconnect tail to the old head.
4. Return new head after rotation.
5. Efficient: O(n) time, constant space.
*/
