// Problem:
// Reorder a linked list as follows:
// Given: 1 → 2 → 3 → 4 → 5
// Output: 1 → 5 → 2 → 4 → 3

// Time Complexity: O(n)
// Space Complexity: O(1)

public class ReorderList {

    static class ListNode {
        int val;
        ListNode next;
        ListNode(int val) {
            this.val = val;
        }
    }

    public static void reorderList(ListNode head) {
        if (head == null || head.next == null) return;

        // Step 1: Find the middle
        ListNode slow = head, fast = head;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }

        // Step 2: Reverse second half
        ListNode prev = null, curr = slow;
        while(curr != null){
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next; 
        }

        // Step 3: Merge two halves
        ListNode first = head;
        ListNode second = prev;

        while (second.next != null) {
            ListNode tmp1 = first.next;
            ListNode tmp2 = second.next;

            first.next = second;
            second.next = tmp1;

            first = tmp1;
            second = tmp2;
        }
    }

    public static void main(String[] args) {
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);

        reorderList(head);
        while (head != null) {
            System.out.print(head.val + " ");
            head = head.next;
        }
        // Expected Output: 1 5 2 4 3
    }
}

/*
Key Takeaways for Fast Revision:
1. Use fast and slow pointers to find middle of the list.
2. Reverse the second half of the list in-place.
3. Merge the two halves alternatingly: first → last → second → second last...
4. Handle edge cases carefully when merging.
5. Time complexity is O(n), space is O(1).
*/
