// Problem:
// Search a 2D matrix for a target value as if the entire matrix is sorted.

// Time Complexity: O(log(m * n))
// Space Complexity: O(1)

public class SearchIn2DMatrix {

    public static boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length, n = matrix[0].length;
        int total = m * n;
        int left = 0, right = total - 1;

        while (left <= right) {
            int mid = (left + right) / 2;
            int midRow = mid / n;
            int midCol = mid % n;

            int value = matrix[midRow][midCol];

            if (value == target) return true;
            else if (value < target) left = mid + 1;
            else right = mid - 1;
        }

        return false;
    }

    public static void main(String[] args) {
        int[][] matrix = {
            {1, 3, 5, 7},
            {10, 11, 16, 20},
            {23, 30, 34, 60}
        };
        int target = 3;
        System.out.println("Target found? " + searchMatrix(matrix, target)); // Expected: true
    }
}

/*
Key Takeaways for Fast Revision:
1. Treat 2D matrix as a 1D sorted array using index transformation.
2. Use classic binary search logic on total = m * n.
3. midRow = mid / n, midCol = mid % n to map mid to 2D.
4. Time complexity: O(log(m*n)) â†’ highly efficient.
*/
