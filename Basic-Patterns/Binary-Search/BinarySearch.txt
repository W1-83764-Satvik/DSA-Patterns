// Problem:
// Implement binary search to find the index of a target element in a sorted array.

// Time Complexity: O(log n)
// Space Complexity: O(1)

public class BinarySearch {

    public static int binarySearch(int[] nums, int target) {
        int left = 0, right = nums.length - 1;

        while (left <= right) {
            int mid = (left + right) / 2;

            if (nums[mid] == target) return mid;
            else if (nums[mid] < target) left = mid + 1;
            else right = mid - 1;
        }

        return -1;
    }

    public static void main(String[] args) {
        int[] nums = {1, 3, 5, 6};
        int target = 5;
        System.out.println("Index: " + binarySearch(nums, target)); // Expected: 2
    }
}

/*
Key Takeaways for Fast Revision:
1. Binary Search works on sorted arrays using divide-and-conquer.
2. Loop until left <= right to include mid in search.
3. Return -1 if element not found.
4. Time complexity is O(log n).
*/
