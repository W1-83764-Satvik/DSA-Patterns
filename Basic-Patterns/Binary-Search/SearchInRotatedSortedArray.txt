// Problem:
// Search for a target in a rotated sorted array with no duplicates.

// Time Complexity: O(log n)
// Space Complexity: O(1)

public class SearchInRotatedSortedArray {

    public static int searchInRotatedSortedArray(int[] nums, int target) {
        int left = 0, right = nums.length - 1;

        while (left <= right) {
            int mid = (left + right) / 2;

            if (nums[mid] == target) return mid;

            // Left half is sorted
            if (nums[left] <= nums[mid]) {
                if (nums[left] <= target && target < nums[mid]) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            } else {
                // Right half is sorted
                if (nums[mid] < target && target <= nums[right]) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }

        return -1;
    }

    public static void main(String[] args) {
        int[] nums = {4,5,6,7,0,1,2};
        int target = 0;
        System.out.println("Target found at index: " + searchInRotatedSortedArray(nums, target)); // Expected: 4
    }
}

/*
Key Takeaways for Fast Revision:
1. Array is sorted but rotated â†’ one half is always sorted.
2. Use binary search logic to identify the sorted half.
3. Narrow down based on which half the target lies in.
4. Time complexity remains O(log n).
*/
