// Problem:
// Given an n x n binary matrix grid, return the length of the shortest clear path from top-left to bottom-right.
// A clear path consists of only 0s and moves 8-directionally. Return -1 if no such path exists.
// LeetCode #1091

// Time Complexity: O(n^2)
// Space Complexity: O(n^2) for the BFS queue and visited tracking

import java.util.*;

public class ShortestPathInBinaryMatrix {

    public int shortestPathBinaryMatrix(int[][] grid) {
        int n = grid.length;
        if (grid[0][0] != 0 || grid[n-1][n-1] != 0) return -1;
        boolean[][] visited = new boolean[n][n];
        Queue<int[]> queue = new LinkedList<>();
        int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1},{1,1},{1,-1},{-1,1},{-1,-1}};
        queue.offer(new int[]{0, 0});
        visited[0][0] = true;
        int pathLen = 1;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int[] cell = queue.poll();
                int r = cell[0], c = cell[1];
                if (r == n-1 && c == n-1) return pathLen;
                for (int[] d : dirs) {
                    int nr = r + d[0], nc = c + d[1];
                    if (nr >= 0 && nr < n && nc >= 0 && nc < n && !visited[nr][nc] && grid[nr][nc] == 0) {
                        queue.offer(new int[]{nr, nc});
                        visited[nr][nc] = true;
                    }
                }
            }
            pathLen++;
        }
        return -1;
    }

    public static void main(String[] args) {
        ShortestPathInBinaryMatrix sol = new ShortestPathInBinaryMatrix();
        int[][] grid = {
            {0,1,0},
            {1,0,0},
            {1,1,0}
        };
        System.out.println("Shortest path: " + sol.shortestPathBinaryMatrix(grid)); // Expected: 4
    }
}

/*
Key Takeaways for Fast Revision:
1. Use BFS from (0,0) to (n-1,n-1) because all edge weights are equal.
2. Track visited cells to avoid revisiting.
3. Explore 8 directions at each step.
4. Return path length when reaching target, else -1.
*/
