// Problem:
// There are numCourses labeled from 0 to numCourses-1. Given prerequisites pairs [a,b] meaning b -> a,
// determine if you can finish all courses (i.e., check if graph has a cycle).
// LeetCode #207

// Time Complexity: O(V + E)
// Space Complexity: O(V + E)

import java.util.*;

public class CourseSchedule {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> graph = new ArrayList<>();
        int[] indegree = new int[numCourses];
        for (int i = 0; i < numCourses; i++) graph.add(new ArrayList<>());
        for (int[] pre : prerequisites) {
            graph.get(pre[1]).add(pre[0]);
            indegree[pre[0]]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) queue.offer(i);
        }
        int visited = 0;
        while (!queue.isEmpty()) {
            int course = queue.poll();
            visited++;
            for (int next : graph.get(course)) {
                indegree[next]--;
                if (indegree[next] == 0) queue.offer(next);
            }
        }
        return visited == numCourses;
    }

    public static void main(String[] args) {
        CourseSchedule sol = new CourseSchedule();
        int numCourses = 2;
        int[][] prerequisites = {{1,0}};
        System.out.println("Can finish: " + sol.canFinish(numCourses, prerequisites)); // Expected: true
    }
}

/*
Key Takeaways for Fast Revision:
1. Use Kahn’s algorithm (BFS topological sort) to detect cycle.
2. Build indegree array and adjacency list.
3. Enqueue courses with indegree 0, process and reduce indegrees.
4. If visited count equals numCourses → no cycle, else cycle exists.
*/
