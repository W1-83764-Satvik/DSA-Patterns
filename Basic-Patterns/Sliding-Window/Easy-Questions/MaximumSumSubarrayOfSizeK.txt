// Problem: Find the Maximum Sum of a Subarray of Size K using Sliding Window.
//  Time Complexity: O(N) : We use two pointers: right expands the window, and left shrinks it.
//  The right pointer iterates once over the entire array (N elements).
//  The left pointer also moves at most once per element (when shrinking the window).

//  Space Complexity: O(1) : Since the solution doesnâ€™t use additional data structures, space complexity remains O(1).

public class SlidingWindowProblems {
    // Function to find the maximum sum of any subarray of size K
    static int maximumSumSubarrayOfSizeK(int[] arr, int k) {
        if (arr.length < k) return -1; // Edge case: If array has fewer elements than K

        int left = 0, sum = 0, maxSum = 0;

        for (int right = 0; right < arr.length; right++) {
            sum += arr[right];  // Expand the window by adding right element

            if (right - left + 1 == k) {  // If window size reaches K
                maxSum = Math.max(maxSum, sum); // Update max sum
                sum -= arr[left];  // Remove leftmost element before shrinking
                left++;  // Shrink the window from the left
            }
        }
        return maxSum;
    }

    // Main method for testing
    public static void main(String[] args) {
        int[] arr = {2, 1, 5, 1, 3, 2};
        int k = 3;
        System.out.println("Maximum Sum Subarray of Size " + k + " is: " + maximumSumSubarrayOfSizeK(arr, k));
        
        // Additional test case
        int[] arr2 = {4, 2, 1, 7, 8, 1, 2, 8, 10};
        int k2 = 3;
        System.out.println("Maximum Sum Subarray of Size " + k2 + " is: " + maximumSumSubarrayOfSizeK(arr2, k2));
    }
}
