// Problem: Count the number of ways to climb stairs when you can take either 1 or 2 steps at a time.
// Time Complexity: O(N) - We iterate from 3 to n once.
// Space Complexity: O(1) - Only constant space is used.

public class DPProblems {
    // Function to count the number of ways to climb stairs
    static int countWays(int n) {
        if (n == 1) return 1; // Only one way to climb one step
        if (n == 2) return 2; // Two ways to climb two steps: (1+1) or (2)

        int a = 1, b = 2, sum = 0;

        // Iteratively calculate ways for steps 3 to n
        for (int i = 3; i <= n; i++) {
            sum = a + b;
            a = b;  // Shift window forward
            b = sum;
        }

        return b; // b holds the result for n steps
    }

    // Main method for testing
    public static void main(String[] args) {
        int steps1 = 5;
        System.out.println("Number of ways to climb " + steps1 + " steps: " + countWays(steps1)); // Expected: 8

        int steps2 = 10;
        System.out.println("Number of ways to climb " + steps2 + " steps: " + countWays(steps2)); // Expected: 89
    }
}

/*
 Key Takeaways:

1. The problem is based on the Fibonacci sequence starting with base values:
   - ways(1) = 1
   - ways(2) = 2
2. We use iterative DP to avoid recursion overhead.
3. Constant space optimization is done using two variables (a, b).
4. Handles large values efficiently without stack overflow.
*/
